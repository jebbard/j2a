############
# Source of generation
############

# Pattern by which persistent object classes (entities) in source package are identified
# Only classes who's name matches the pattern are recognized.
entityPattern=.*

# A suffix of each entity class that will not make it into the final TO names
entitySuffix=

# Absolute or relative path of the source classes - must be the root of their class path
sourcePath=../WeightMasterServerImpl/bin

# Semicolon separated paths of dependencies
# Put any paths for here that are dependencies of the source classes.
dependencyPaths=../WeightMasterServerAPI/bin;../SpringUtils/bin

# Semicolon-separated list of fully qualified package names of the source packages
# All classes from these packages that match the given entity pattern
# are taken as source entities for TO generation
# The number of packages given here must exactly match the number of packages 
# specified in targetBasePackages. Each given source package is mapped to the target base package 
# with same position.
sourcePackages=de.je.wm.user.impl.entity

# Specifies whether the default for the nullable property of fields is "true" or "false"
defaultNullable=false

# true to recurse into sub-packages of the source package, false otherwise
sourceRecursive=true

############
# Target of generation
############

# A suffix for each generated data TO - Must be different from the other suffixes.
# If nothing is given, defaults to "DataTO"
dataTOSuffix=DataTO

# A suffix for each generated primary key TO - Must be different from the other suffixes.
# If nothing is given, defaults to "PkeyTO"
pkeyTOSuffix=PkeyTO

# A suffix for each generated compound TO - Must be different from the other suffixes.
# If nothing is given, defaults to "CTO"
compTOSuffix=CTO

# A suffix for each generated info TO
# If nothing is given, defaults to "InfoTO"
infoTOSuffix=InfoTO

# Type of @Id annotated fields
idType=java.lang.Long

# Type of @Version annotated fields
versionType=java.lang.Long

# Absolute or relative path of the target classes - i.e. the root of their class path
targetPath=../WeightMasterServerAPI/src/

# Semicolon-separated list of fully qualified package names of the target packages.
# All classes generated will be written to these packages.
# The number of packages given here must exactly match the number of packages 
# specified in sourcePackages. Each given source package is mapped to the target base package 
# with same position.
targetBasePackages=de.je.wm.diary.api.services

# An optional means to refine target generation, specified like this:
#    targetChildPackage_X=<target TO name pattern> -> <sub package name>
# All generated TO classes matching the give name pattern are written to the
# given sub package of the target base package.
# There can be arbitrary targetChildPackage_X= properties, but each with different X
# and X must be a positive integer.
# Order is important if there are intersecting patterns: First pattern that
# matches wins
#targetChildPackage_1=Report.*->report
#targetChildPackage_2=Sponsoring.*->sponsoring
#targetChildPackage_3=Application.*->application
#targetChildPackage_4=Delivery.*->delivery


# This option allows to specify PO class names for which only a single InfoTO shall be generated (semicolon-separated)
# instead of pkeyTO, dataTO and CTO
genInfoTO=

############
# Converter
############

# Absolute or relative path of the converter class - must be the root of its class path
implementationPath=C:/Users/jebert/PRIVAT/DEV/03_Workspaces/03_Archive/fhunii/Fhunii_Server_Impl/src/

# Semicolon-separated list of fully qualified name of the Converter classes
# The number of class names given here must exactly match the number of packages 
# specified in sourcePackages and targetBasePackages. Each given class is mapped to the target base package 
# with same position.
converterClasses=de.fhunii.core.reportManagement.impl.dao.conv.ReportManagementTOConverter